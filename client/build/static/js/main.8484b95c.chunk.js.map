{"version":3,"sources":["globalStyle.js","components/header.jsx","components/general/header_title.jsx","components/general/header_top_ref.jsx","components/general/header.jsx","components/seal_app_on_production/element/tool.jsx","actions/actionCreator.js","reduxConstants.js","components/seal_app_on_production/element/tool_array.jsx","components/seal_app_on_production/element/machine_number.jsx","components/seal_app_on_production/element/marker.jsx","components/seal_app_on_production/element/main_element.jsx","components/seal_app_on_production/seal_app_on_production.jsx","components/seal_app_in_die/element.jsx","components/seal_app_in_die/elements.jsx","components/seal_app_in_die/select/select_machine.jsx","components/seal_app_in_die/seal_app_in_die.jsx","components/router/main_router.jsx","components/footer.jsx","components/main.jsx","App.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyleHeader","styled","header","Header","StyleH2","h2","Title","children","StyleDiv","div","props","color","StyleTextSpan","span","logo","TopRef","myLogo","myText","myColor","myRefs","to","StyleSection","section","MainHeader","text","refs","StyleSpan","Tool","myClick","id","onClick","addMachines","machines","type","addSealapps","sealapps","StyledDiv","connect","state","machine","dispatch","handleClick","fetch","method","headers","body","JSON","stringify","onmachine","then","response","removeSealApp","data","console","log","filter","element","Number","onMachine","map","key","_id","name","StyleP","p","myMachine","MachineNumber","Marker","toUpperCase","StyleArticle","article","useEffect","Promise","all","json","number","SealAppOnProduction","selectedMachine","status","addAppToMachine","StyledSection","sealAppList","el","machineList","unshift","value","onChange","e","target","SealAppInDie","MainRouter","exact","path","component","StyleFooter","footer","Footer","Main","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8484b95c.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    @font-face {\r\n        font-family: 'Roboto';\r\n        src: url('fonts/Roboto.ttf');\r\n    }\r\n    @font-face {\r\n        font-family: 'Roboto-Thin';\r\n        src: url('fonts/Robotothin.ttf');\r\n    }\r\n    @font-face {\r\n        font-family: 'Roboto-Medium';\r\n        src: url('fonts/Robotomedium.ttf');\r\n    }\r\n    @font-face {\r\n        font-family: 'Roboto-Bold';\r\n        src: url('fonts/Robotobold.ttf');\r\n    }\r\n    @font-face {\r\n        font-family: 'Font-Awesome';\r\n        src: url('fonts/fa-solid-900.ttf');\r\n    }\r\n    body {\r\n        margin: 0px;\r\n        cursor: default;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleHeader = styled.header`\r\n    width: 100%;\r\n    height: 50px;\r\n    background: #EBEBEB;\r\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.17);\r\n    div {\r\n        display: flex;\r\n        align-items: center;\r\n        height: 100%;\r\n        h2, p {\r\n            font-family: 'Roboto-Bold';\r\n            margin: 0px;\r\n            color: #7EAFBA;\r\n        }\r\n        h2 {\r\n            font-size: 24px;\r\n            margin-left: 25px;\r\n        }\r\n        p {\r\n            font-size: 13px;\r\n            margin-left: 5px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Header = () => {\r\n    return(\r\n        <StyleHeader><div><h2>Seal applicator database</h2><p>beta</p></div></StyleHeader>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleH2 = styled.h2`\r\n    color: #484848;\r\n    font-size: 24px;\r\n    font-family: 'Roboto-Bold';\r\n    margin: 0px 0px 0px 25px;\r\n`;\r\n\r\nconst Title = ({children}) => {\r\n    return(\r\n        <StyleH2>{children}</StyleH2>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst StyleDiv = styled.div`\r\n    position: relative;\r\n    color: ${props => props.color};\r\n    margin: 0px 25px 0px 0px;\r\n    a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n    cursor: pointer;\r\n    :hover {\r\n        span {\r\n            ::after {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst StyleTextSpan = styled.span`\r\n    font-family: 'Roboto-Bold';\r\n    font-size: 24px;\r\n    ::before {\r\n        font-family: 'Font-Awesome';\r\n        font-size: 20px;\r\n        margin-right: 5px;\r\n        content: '${props => props.logo}'\r\n    }\r\n    ::after {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        right: 0px;\r\n        background: ${props => props.color};\r\n        width: 50px;\r\n        height: 2px;\r\n        content: '';\r\n        transition: 0.5s ease-out;\r\n    }\r\n`;\r\n\r\nconst TopRef = ({myLogo, myText, myColor, myRefs}) => {\r\n    return(\r\n        <StyleDiv color={myColor}>\r\n            <Link to={myRefs}><StyleTextSpan logo={myLogo} color={myColor}>{myText}</StyleTextSpan></Link>\r\n        </StyleDiv>\r\n    );\r\n}\r\n\r\nexport default TopRef;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Title from './header_title';\r\nimport TopRef from './header_top_ref';\r\n\r\n\r\nconst StyleSection = styled.section`\r\n    display: flex;\r\n    height: 60px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n`;\r\n\r\nconst MainHeader = ({logo, text, color, refs, children}) => {\r\n    return(\r\n        <StyleSection>\r\n            <Title>{children}</Title>\r\n            <TopRef myLogo={logo} myText={text} myColor={color} myRefs={refs}/>\r\n        </StyleSection>\r\n    );\r\n}\r\n\r\nexport default MainHeader;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleSpan = styled.span`\r\n    position: relative;\r\n    font-family: 'Roboto';\r\n    font-size: 16px;\r\n    margin-right: 20px;\r\n    color: #3A3A3A;\r\n    cursor: pointer;\r\n    ::before {\r\n        position: absolute;\r\n        bottom: 0px;\r\n        background: #306F7D;\r\n        width: 0px;\r\n        height: 2px;\r\n        content: '';\r\n        transition: 0.3s ease-out;\r\n    }\r\n    ::after {\r\n        font-family: 'Font-Awesome';\r\n        content: \"\\f063\";\r\n        margin-left: 5px;\r\n        transition: 0.2s linear;\r\n    }\r\n    :hover {\r\n        ::before {\r\n            width: 100%;\r\n        }\r\n        ::after {\r\n            color: #7EAFBA;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tool = ({myClick, id, children }) => {\r\n    const handleClick = () => {\r\n        myClick(id)\r\n    }\r\n    return(\r\n        <StyleSpan onClick={handleClick}>{children}</StyleSpan>\r\n    );\r\n}\r\n\r\nexport default Tool;","import { ADD_MACHINES, SELECT_MACHINE, ADD_APP_TO_MACHINE, ADD_SEAL_APPS, REMOVE_SEAL_APPS_FROM_MACHINE } from '../reduxConstants.js';\r\n\r\nexport const addMachines = machines => {\r\n    return {\r\n        type: ADD_MACHINES,\r\n        machines\r\n    };\r\n};\r\n\r\nexport const addSealapps = sealapps => {\r\n    return {\r\n        type: ADD_SEAL_APPS,\r\n        sealapps\r\n    }\r\n}\r\n\r\nexport const removeSealApp = id => {\r\n    return {\r\n        type: REMOVE_SEAL_APPS_FROM_MACHINE,\r\n        id\r\n    }\r\n}\r\n\r\nexport const addAppToMachine = (id, machine) => {\r\n    return {\r\n        type: ADD_APP_TO_MACHINE,\r\n        id,\r\n        machine\r\n    }\r\n}\r\n\r\nexport const changeSelectedMachine = machine => {\r\n    return {\r\n        type: SELECT_MACHINE,\r\n        machine\r\n    }\r\n}","export const ADD_MACHINES = 'ADD_MACHINES';\r\nexport const SELECT_MACHINE = \"SELECT_MACHINE\";\r\nexport const ADD_APP_TO_MACHINE = \"ADD_APP\";\r\nexport const ADD_SEAL_APPS = \"ADD_SEAL_APPS\";\r\nexport const REMOVE_SEAL_APPS_FROM_MACHINE = \"REMOVE_SEAL_APPS_FROM_MACHINE\";","import React from 'react';\r\nimport Tool from './tool.jsx'\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { removeSealApp } from './../../../actions/actionCreator.js';\r\n\r\nconst StyledDiv = styled.div`\r\n    display: flex;\r\n    margin: 0px 10px;\r\n    overflow: auto;\r\n`;\r\n\r\nconst ArrayTool = ({ sealapps, machine, dispatch }) => {\r\n    const handleClick = (id) => {\r\n        fetch(`http://localhost:5000/sealapp?id=${id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                onmachine: 'False'\r\n            })\r\n        }).then(response => {\r\n            dispatch(removeSealApp(id));\r\n            return response.text()\r\n        }).then(data => {\r\n            console.log(data);\r\n        })\r\n    }\r\n    const filter = sealapps.filter(element => (Number(element.onMachine) === Number(machine)));\r\n    return(\r\n        <StyledDiv>\r\n            {filter.map(element => <Tool key={element._id} id={element._id} myClick={handleClick}>{element.name}</Tool>)}\r\n        </StyledDiv>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { sealapps: state.sealapps }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ArrayTool);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleP = styled.p`\r\n    display: flex;\r\n    width: 60px;\r\n    height: 40px;\r\n    font-family: 'Roboto-Bold';\r\n    font-size: 36px;\r\n    justify-content: center;\r\n    color: ${props => props.myMachine === 'komax' ? '#FF7A00' : props.myMachine === 'megomat' ? '#474FFF' : '#888'};\r\n    margin: 0px;\r\n    border-right: 1px solid #2B2B2B;\r\n`;\r\n\r\nconst MachineNumber = ({children, machine}) => {\r\n    return(\r\n        <StyleP myMachine={machine}>{children}</StyleP>\r\n    );\r\n}\r\n\r\nexport default MachineNumber;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleDiv = styled.div`\r\n    position: absolute;\r\n    top: -7.5px;\r\n    left: 45px;\r\n    width: 75px;\r\n    height: 15px;\r\n    background: ${props => props.machine === 'megomat' ? '#474FFF' : props.machine === 'komax' ? '#FF7A00' : '#888'};\r\n    display: flex;\r\n    justify-content: center;\r\n    span {\r\n        display: flex;\r\n        align-self: center;\r\n        color: white;\r\n        font-family: 'Roboto-Medium';\r\n        font-size: 11px;\r\n        letter-spacing: 1px;\r\n    }\r\n`;\r\n\r\nconst Marker = ({children}) => {\r\n    return(\r\n        <StyleDiv machine={children}>\r\n            <span>{children.toUpperCase()}</span>\r\n        </StyleDiv>\r\n    );\r\n}\r\n\r\nexport default Marker;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport ArrayTool from './tool_array.jsx';\r\nimport MachineNumber from './machine_number.jsx';\r\nimport Marker from './marker.jsx';\r\nimport { connect } from 'react-redux';\r\nimport { addMachines, addSealapps } from './../../../actions/actionCreator.js';\r\n\r\nconst StyleArticle = styled.article`\r\n    position: relative;\r\n    display: flex;\r\n    height: 40px;\r\n    align-items: center;\r\n    border: 1px solid #2B2B2B;\r\n    margin: 10px 25px 10px 25px;\r\n    border-radius: 0px 40px 40px 0px;\r\n`;\r\n\r\nconst Element = ({machines, dispatch}) => {\r\n    useEffect(() => {\r\n        Promise.all([\r\n            fetch('http://localhost:5000/machine').then(response => response.json()),\r\n            fetch('http://localhost:5000/sealapp').then(response => response.json())\r\n        ]).then(data => {\r\n            dispatch(addMachines(data[0]));\r\n            dispatch(addSealapps(data[1]));\r\n        })\r\n    }, [dispatch])\r\n    return(\r\n        <section>\r\n            {\r\n                machines.map(machine => \r\n                    <StyleArticle key={machine.number}>\r\n                        <MachineNumber machine={machine.type}>{machine.number}</MachineNumber>\r\n                        <Marker>{machine.type}</Marker>\r\n                        <ArrayTool machine={machine.number}/>\r\n                    </StyleArticle>\r\n                )\r\n            }\r\n        </section>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { machines: state.machines };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Element);","import React from 'react';\r\nimport MainHeader from '../general/header.jsx';\r\nimport Element from './element/main_element.jsx';\r\n\r\nconst SealAppOnProduction = () => {\r\n    return(\r\n        <main>\r\n            <MainHeader logo={'\\f062'} text={'Send'} color={'#306F7D'} refs={\"/SealApps\"}>Seal applicator on production</MainHeader>\r\n            <Element />\r\n        </main>\r\n        \r\n    );\r\n}\r\n\r\nexport default SealAppOnProduction;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { addAppToMachine } from './../../actions/actionCreator.js';\r\n\r\nconst StyleSpan = styled.span`\r\n    font-family: 'Roboto';\r\n    font-size: 16px;\r\n    color: #3A3A3A;\r\n    padding: 5px 10px;\r\n    margin: 5px 5px;\r\n    border: 1px solid #306F7D;\r\n    border-radius: 10px;\r\n    transition: 0.2s linear;\r\n    cursor: pointer;\r\n    ::after {\r\n        font-family: 'Font-Awesome';\r\n        content: \"\\f062\";\r\n        color: #7EAFBA;\r\n        margin-left: 5px;\r\n        transition: 0.2s linear;\r\n    }\r\n    :hover {\r\n        border-color: #7EAFBA;\r\n        ::after {\r\n            color: #306F7D;\r\n        }\r\n    }\r\n`;\r\n\r\nconst Element = ({ selectedMachine, children, dispatch }) => {\r\n    const handleClick = id => {\r\n        fetch(`http://localhost:5000/sealapp?id=${id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                onmachine: Number(selectedMachine)\r\n            })\r\n        }).then(response => {\r\n            if (response.status === 200) dispatch(addAppToMachine(children._id, selectedMachine));\r\n            return response.text();\r\n        }).then(data => console.log(data));\r\n    }\r\n    return(\r\n        <StyleSpan onClick={() => handleClick(children._id)}>{children.name}</StyleSpan>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { selectedMachine: state.selectedMachine }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Element);","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { addSealapps, addMachines } from './../../actions/actionCreator.js';\r\nimport Element from './element.jsx';\r\n\r\nconst StyledSection = styled.section`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    margin-bottom: 100px;\r\n`;\r\n\r\nconst Elements = ({ dispatch, sealapps }) => {\r\n    useEffect(() => {\r\n        Promise.all([\r\n            fetch('http://localhost:5000/machine').then(response => response.json()),\r\n            fetch('http://localhost:5000/sealapp').then(response => response.json())\r\n        ]).then(data => {\r\n            dispatch(addMachines(data[0]));\r\n            dispatch(addSealapps(data[1]));\r\n        })\r\n    }, [dispatch])\r\n    const sealAppList = sealapps.filter(el => el.onMachine === \"False\");\r\n    return(\r\n        <StyledSection>\r\n            {sealAppList.map(el => <Element key={el._id}>{el}</Element>)}\r\n        </StyledSection>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { sealapps: state.sealapps };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Elements);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { changeSelectedMachine } from './../../../actions/actionCreator.js';\r\n\r\nconst StyleSection = styled.section`\r\n    margin: 0px 25px;\r\n    p {\r\n        display: inline-block;\r\n        font-size: 16px;\r\n        font-family: 'Roboto-Bold';\r\n        color: #3A3A3A;\r\n        margin-right: 5px;\r\n    }\r\n    select {\r\n        border: 1px solid #7EAFBA;\r\n        width: 50px;\r\n        height: 20px;\r\n        margin-left: 5px;\r\n        outline: none;\r\n        font-size: 14px;\r\n        font-family: 'Roboto';\r\n        option {\r\n            color: #3A3A3A;\r\n        }\r\n    }\r\n`;\r\n\r\nconst SelectMachine = ({ machines, selectedMachine, dispatch }) => {\r\n    const machineList = machines.map(element => element.number)\r\n    machineList.unshift('-');\r\n    const handleChange = e => {\r\n        dispatch(changeSelectedMachine(e.target.value))\r\n    }\r\n    return(\r\n        <StyleSection>\r\n            <p>Select machine</p>\r\n            <select value={selectedMachine} onChange={handleChange}>\r\n               { machineList.map(element => <option key={element}>{element}</option>) }\r\n            </select>\r\n        </StyleSection>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { machines: state.machines }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SelectMachine);","import React from 'react';\r\nimport MainHeader from '../general/header.jsx';\r\nimport Elements from './elements.jsx';\r\nimport SelectMachines from './select/select_machine.jsx';\r\n\r\nconst SealAppInDie = () => {\r\n    return(\r\n        <main>\r\n            <MainHeader logo={'\\f00d'} text={'Close'} color={'#FF4444'} refs={\"/\"}>Seal applicator in DIE center</MainHeader>\r\n            <SelectMachines />\r\n            <Elements />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default SealAppInDie;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport SealAppOnProduction from '../seal_app_on_production/seal_app_on_production.jsx';\r\nimport SealAppInDie from '../seal_app_in_die/seal_app_in_die.jsx';\r\n\r\nconst MainRouter = () => {\r\n    return(\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path='/' component={SealAppOnProduction} />\r\n                <Route path='/SealApps' component={SealAppInDie} />\r\n                <Route path=\"\" component={SealAppOnProduction} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default MainRouter;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyleFooter = styled.footer`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n    background-color: #353535;\r\n    width: 100%;\r\n    height: 50px;\r\n    margin-top: 50px;\r\n    span {\r\n        color: #aaa;\r\n        font-family: 'Roboto';\r\n        font-size: 12px;\r\n        margin: 5px 25px;\r\n    }\r\n`;\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <StyleFooter id=\"footer\">\r\n            <span>developer Yakymiv Yaroslav for \"ВО Карпати\"</span>\r\n        </StyleFooter>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Fragment } from 'react';\r\nimport Header from './header.jsx';\r\nimport MainRouter from './router/main_router.jsx';\r\nimport Footer from './footer.jsx';\r\n\r\nconst Main = () => {\r\n    return(\r\n        <Fragment>\r\n            <Header />\r\n            <MainRouter />\r\n            <Footer />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Main;","import React, { Fragment } from 'react';\nimport GlobalStyle from './globalStyle.js'\nimport Main from './components/main.jsx'\n\nfunction App() {\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <Main />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { ADD_MACHINES, ADD_SEAL_APPS, SELECT_MACHINE, ADD_APP_TO_MACHINE, REMOVE_SEAL_APPS_FROM_MACHINE } from './../reduxConstants.js';\r\n\r\nconst machines = (state = [], action) => {\r\n    switch(action.type) {\r\n        case ADD_MACHINES:\r\n            return action.machines;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst sealapps = (state = [], action) => {\r\n    switch(action.type) {\r\n        case ADD_SEAL_APPS:\r\n            return action.sealapps;\r\n        case REMOVE_SEAL_APPS_FROM_MACHINE: \r\n            return state.filter(el => el._id !== action.id);\r\n        case ADD_APP_TO_MACHINE: \r\n            return state.map(el => el._id === action.id ? el.onMachine = action.machine : el);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst selectedMachine = (state = \"-\", action) => {\r\n    switch(action.type) {\r\n        case SELECT_MACHINE:\r\n            return  action.machine\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    machines,\r\n    sealapps,\r\n    selectedMachine\r\n  })","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport machineList from './reducers/reducers.js';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(machineList, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}